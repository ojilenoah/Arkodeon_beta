{"file_contents":{"GEMINI.md":{"content":"# **AI Development Guidelines for Next.js in Firebase Studio**\n\nThese guidelines define the operational principles and capabilities of an AI agent (e.g., Gemini) interacting with Next.js projects within the Firebase Studio environment. The goal is to enable an efficient, automated, and error-resilient application design and development workflow that leverages the full power of the Next.js framework.\n\n## **Environment & Context Awareness**\n\nThe AI operates within the Firebase Studio development environment, which provides a Code OSS-based IDE and a pre-configured environment for Next.js development.\n\n* **Project Structure (App Router):** The AI assumes a standard Next.js project structure using the App Router.\n  * `/app`: The core directory for file-based routing.\n  * `layout.tsx`: The root layout.\n  * `page.tsx`: The page UI for a route.\n  * `/components`: For reusable UI components.\n  * `/lib`: For utility functions and libraries.\n* **`dev.nix` Configuration:** The AI is aware of the `.idx/dev.nix` file for environment configuration, which includes `pkgs.nodejs` and other necessary tools.\n* **Preview Server:** Firebase Studio provides a running preview server. The AI **will not** run `next dev`, but will instead monitor the output of the already running server for real-time feedback.\n* **Firebase Integration:** The AI can integrate Firebase services, following standard procedures for Next.js projects, including using the Firebase Admin SDK in server-side code.\n\n## Firebase MCP\n\nWhen requested for Firebase add the following the server configurations to .idx/mcp.json. Just add the following and don't add anything else.\n\n{\n    \"mcpServers\": {\n        \"firebase\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"firebase-tools@latest\",\n                \"experimental:mcp\"\n            ]\n        }\n    }\n}\n\n## **Code Modification & Dependency Management**\n\nThe AI is empowered to modify the codebase autonomously based on user requests. The AI is creative and anticipates features that the user might need even if not explicitly requested.\n\n* **Core Code Assumption:** The AI will primarily work with React components (`.tsx` or `.jsx`) within the `/app` directory. It will create new routes, layouts, and components as needed.\n* **Package Management:** The AI will use `npm` or `yarn` for package management.\n* **Next.js CLI:** The AI will use the Next.js CLI for common development tasks:\n  * `npm run build`: To build the project for production.\n  * `npm run lint`: To run ESLint and check for code quality issues.\n\n## **Next.js Core Concepts (App Router)**\n\n### **Server Components by Default**\n\nThe AI understands that components in the `/app` directory are React Server Components (RSCs) by default.\n\n* **Data Fetching:** The AI will perform data fetching directly in Server Components using `async/await`, colocating data access with the component that uses it.\n* **\"use client\" Directive:** For components that require interactivity, state, or browser-only APIs, the AI will use the `\"use client\"` directive to mark them as Client Components.\n* **Best Practice:** Keep Client Components as small as possible and push them to the leaves of the component tree to minimize the client-side JavaScript bundle.\n\n### **File-based Routing**\n\nThe AI will manage routing by creating folders and `page.tsx` files within the `/app` directory.\n\n* **Layouts (`layout.tsx`):** Define shared UI for a segment and its children.\n* **Pages (`page.tsx`):** Define the unique UI of a route.\n* **Loading UI (`loading.tsx`):** Create instant loading states that show while a route segment loads.\n* **Error Handling (`error.tsx`):** Isolate errors to specific route segments.\n\n### **Server Actions**\n\nFor data mutations (e.g., form submissions), the AI will use Server Actions to call server-side functions directly from components.\n\n* **Definition:** The AI will define an `async` function with the `\"use server\"` directive.\n* **Invocation:** Actions will be invoked using the `action` prop on a `<form>` element or from custom event handlers.\n* **Security:** Server Actions are the preferred way to handle mutations as they provide built-in protection against POST-only requests.\n\n*Example of a simple Server Action:*\n\n```ts\n// app/actions.ts\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string().email(),\n})\n\nexport async function-save-email(prevState: any, formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n  // Save email to database...\n  return { message: 'Success!' }\n}\n```\n\n## **Automated Error Detection & Remediation**\n\nA critical function of the AI is to continuously monitor for and automatically resolve errors.\n\n* **Post-Modification Checks:** After every code modification, the AI will:\n  * Run `npm run lint -- --fix` to catch and fix linting issues.\n  * Monitor the IDE's diagnostics (problem pane).\n  * Check the output of the running dev server for compilation and runtime errors.\n* **Automatic Error Correction:** The AI will attempt to fix common Next.js and React errors.\n* **Problem Reporting:** If an error cannot be resolved, the AI will report the specific error message, its location, and a concise explanation with a suggested fix.\n\n## **Visual Design**\n\n**Aesthetics:** The AI always makes a great first impression by creating a unique user experience that incorporates modern components, a visually balanced layout with clean spacing, and polished styles that are easy to understand.\n\n1. Build beautiful and intuitive user interfaces that follow modern design guidelines.\n2. Ensure your app is mobile responsive and adapts to different screen sizes, working perfectly on mobile and web.\n3. Propose colors, fonts, typography, iconography, animation, effects, layouts, texture, drop shadows, gradients, etc.\n4. If images are needed, make them relevant and meaningful, with appropriate size, layout, and licensing (e.g., freely available). If real images are not available, provide placeholder images.\n5. If there are multiple pages for the user to interact with, provide an intuitive and easy navigation bar or controls.\n\n**Bold Definition:** The AI uses modern, interactive iconography, images, and UI components like buttons, text fields, animation, effects, gestures, sliders, carousels, navigation, etc.\n\n1. Fonts \\- Choose expressive and relevant typography. Stress and emphasize font sizes to ease understanding, e.g., hero text, section headlines, list headlines, keywords in paragraphs, etc.\n2. Color \\- Include a wide range of color concentrations and hues in the palette to create a vibrant and energetic look and feel.\n3. Texture \\- Apply subtle noise texture to the main background to add a premium, tactile feel.\n4. Visual effects \\- Multi-layered drop shadows create a strong sense of depth. Cards have a soft, deep shadow to look \"lifted.\"\n5. Iconography \\- Incorporate icons to enhance the userâ€™s understanding and the logical navigation of the app.\n6. Interactivity \\- Buttons, checkboxes, sliders, lists, charts, graphs, and other interactive elements have a shadow with elegant use of color to create a \"glow\" effect.\n\n**Accessibility or A11Y Standards:** The AI implements accessibility features to empower all users, assuming a wide variety of users with different physical abilities, mental abilities, age groups, education levels, and learning styles.\n\n## **Iterative Development & User Interaction**\n\nThe AI's workflow is iterative, transparent, and responsive to user input.\n\n* **Plan Generation & Blueprint Management:** Each time the user requests a change, the AI will first generate a clear plan overview and a list of actionable steps. This plan will then be used to **create or update a `blueprint.md` file** in the project's root directory.\n  * The blueprint.md file will serve as a single source of truth, containing:\n    * A section with a concise overview of the purpose and capabilities.\n    * A section with a detailed outline documenting the project, including *all style, design, and features* implemented in the application from the initial version to the current version.\n    * A section with a detailed outline of the plan and steps for the current requested change.\n  * Before initiating any new change or at the start of a new chat session, the AI will reference the blueprint.md to ensure full context and understanding of the application's current state and existing features. This ensures consistency and avoids redundant or conflicting modifications.\n* **Prompt Understanding:** The AI will interpret user prompts to understand the desired changes. It will ask clarifying questions if the prompt is ambiguous.\n* **Contextual Responses:** The AI will provide conversational responses, explaining its actions, progress, and any issues encountered.\n* **Error Checking Flow:**\n  1. **Important:** The AI will **not** start the dev server (`next dev`), as it is already managed by Firebase Studio.\n  2. **Code Change:** AI applies a code modification.\n  3. **Dependency Check:** If a new package is needed, AI runs `npm install`.\n  4. **Compile & Analyze:** AI runs `npm run lint` and monitors the dev server.\n  5. **Preview Check:** AI observes the browser preview for visual and runtime errors.\n  6. **Remediation/Report:** If errors are found, AI attempts automatic fixes. If unsuccessful, it reports details to the user.","size_bytes":9552},"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"blueprint.md":{"content":"# Project Blueprint\n\n## Overview\n\nThis document outlines the plan, features, and design of a Next.js application. The application will feature a responsive header with navigation elements, course information, and user stats, along with a sliding sidebar.\n\n## Current Plan\n\n### Accordion Polish\n\n**Objective:** Add a click-away-to-close feature and a smooth exit animation to the accordion.\n\n*   **Click-Away to Close:** Clicking anywhere outside of the open accordion will close it.\n*   **Smooth Exit Animation:** A fade-out and slide-down animation will be added for a smoother closing transition.\n\n**Steps:**\n\n1.  **Update `src/components/ContinueAccordion.tsx`:** An event listener will be added to detect and handle clicks outside of the component, and CSS transitions will be refined for a polished open/close animation.\n\n## Implemented Features\n\n### Floating Accordion Button v2\n\n*   Compact, centered, and visually seamless design.\n*   Reduced padding and moved closer to the bottom of the page.\n\n### Floating Accordion Button v1\n\n*   A floating button on the bottom-right opens an accordion with question and maintrack options.\n\n### Iconography Refinements\n\n*   **Cube Icon:** The lines of the cube icon within the \"Bits\" badge will be made thicker.\n*   **Info Icon:** The \"i\" character within the info icon will be made extra bold, and the surrounding button will be made smaller.\n\n### Sidebar Component v2\n\n*   Sidebar opens below the header.\n*   Background color is pure black (`bg-black`).\n\n### Sidebar Component v1\n\n*   Sidebar slides in from the left.\n*   Toggle functionality via sidebar button and an overlay.\n*   \"Bits\" badge resized to 70%.\n\n### Header Component v2\n\n*   Responsive header with back button, course title, info button, XP badge, and options button.\n*   Text truncation for smaller screens.\n*   Second row with sidebar button, module path, and \"Bits\" badge.\n\n### Header Component v1\n\n*   Responsive header with back button, course title, XP badge, and options button.\n\n## Design and Style Guide\n\n*   **Colors:** The header and sidebar use a dark theme (`bg-black`) with white text and icons. Badges have muted purple and green backgrounds.\n*   **Typography:** The course title is bold with a text size of `text-xl`.\n","size_bytes":2248},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n","size_bytes":133},"src/app/globals.css":{"content":"@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n","size_bytes":488},"src/app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n","size_bytes":689},"src/app/page.tsx":{"content":"import Header from '../components/Header';\nimport ContinueAccordion from '../components/ContinueAccordion';\n\nexport default function Home() {\n  return (\n    <div className=\"flex flex-col h-screen bg-black\">\n      <Header />\n      <main className=\"flex-grow flex justify-center items-stretch\">\n        <div className=\"w-full max-w-2xl bg-black text-white rounded-none sm:rounded-lg shadow-lg p-8 flex flex-col border border-white border-opacity-50\">\n          <h1 className=\"text-2xl font-bold mb-4\">\n            Welcome to the Course!\n          </h1>\n          <p className=\"text-gray-300\">\n            This is the main content area.\n          </p>\n        </div>\n      </main>\n      <ContinueAccordion />\n    </div>\n  );\n}\n","size_bytes":724},"src/components/ContinueAccordion.tsx":{"content":"'use client'\n\nimport { useState, useEffect, useRef } from 'react'\n\nexport default function ContinueAccordion() {\n  const [isOpen, setIsOpen] = useState(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n\n  const toggleAccordion = () => {\n    setIsOpen(!isOpen)\n  }\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (componentRef.current && !componentRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [componentRef])\n\n  return (\n    <div ref={componentRef} className=\"fixed bottom-2 left-1/2 -translate-x-1/2 z-50\">\n\n      {/* The Panel: Now closer to the button (mb-1) and more compact. */}\n      <div\n        className={`absolute bottom-full mb-1 w-max bg-neutral-800 rounded-lg shadow-lg transition-all duration-300 ease-in-out left-1/2 -translate-x-1/2\n          ${isOpen \n            ? 'opacity-100 translate-y-0 pointer-events-auto' \n            : 'opacity-0 translate-y-2 pointer-events-none'}`}\n      >\n        {/* The inner buttons have reduced padding for a compact feel. */}\n        <div className=\"flex flex-col items-stretch\">\n          {Array.from({ length: 6 }, (_, i) => (\n            <button key={`q-${i+1}`} className=\"text-left px-2 text-white hover:bg-neutral-700\">Question {i + 1}</button>\n          ))}\n          <button className=\"text-left px-2 text-white font-bold hover:bg-neutral-700 rounded-b-lg\">Maintrack</button>\n        </div>\n      </div>\n\n      {/* The Button: A simple, standalone button. Its layout is stable and correct. */}\n      <button\n        onClick={toggleAccordion}\n        className=\"w-auto bg-neutral-800 text-white shadow-lg font-bold flex items-center justify-center hover:bg-neutral-700 rounded-lg\"\n        style={{ padding: '4px 12px', minHeight: '32px' }}\n      >\n        Continue\n      </button>\n    </div>\n  )\n}\n","size_bytes":2005},"src/components/Header.tsx":{"content":"'use client'\n\nimport Image from 'next/image'\nimport { useState } from 'react'\nimport Sidebar from './Sidebar'\n\nexport default function Header() {\n  const [isSidebarOpen, setSidebarOpen] = useState(false)\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!isSidebarOpen)\n  }\n\n  return (\n    <>\n      <header className=\"bg-black text-white shadow-md px-2 z-50 relative\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 min-w-0\">\n            <button className=\"p-2 rounded-full hover:bg-gray-900 flex-shrink-0\">\n              <Image src=\"/arrow-left.svg\" alt=\"Back\" width={24} height={24} />\n            </button>\n            <h1 className=\"text-xl font-bold truncate\">Introduction to Python</h1>\n            <button className=\"p-1 bg-gray-800 rounded-md hover:bg-gray-700 flex-shrink-0\">\n              <Image src=\"/info-icon.svg\" alt=\"Info\" width={12} height={12} />\n            </button>\n          </div>\n          <div className=\"flex items-center space-x-2 flex-shrink-0\">\n            <div className=\"flex items-center space-x-2 bg-purple-900 text-white rounded-md px-2 py-1\" style={{ transform: 'scale(0.7)' }}>\n              <span className=\"font-bold\">1500</span>\n              <span>XP</span>\n            </div>\n            <button className=\"p-2 rounded-full hover:bg-gray-900\">\n              <Image src=\"/dots-vertical.svg\" alt=\"Options\" width={24} height={24} />\n            </button>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between -mt-2\">\n          <div className=\"flex items-center space-x-2 min-w-0\">\n            <button onClick={toggleSidebar} className=\"p-2 rounded-full hover:bg-gray-900 flex-shrink-0\">\n              <Image src=\"/sidebar-icon.svg\" alt=\"Sidebar\" width={24} height={24} />\n            </button>\n            <span className=\"text-lg truncate\">module1/unit1</span>\n            <div className=\"flex items-center space-x-2 bg-green-900 text-white rounded-md px-2 py-1 flex-shrink-0\" style={{ transform: 'scale(0.7)' }}>\n              <Image src=\"/cube-icon.svg\" alt=\"Bits\" width={20} height={20} />\n              <span className=\"font-bold\">250</span>\n              <span>Bits</span>\n            </div>\n          </div>\n        </div>\n      </header>\n      <Sidebar isOpen={isSidebarOpen} />\n      {isSidebarOpen && <div onClick={toggleSidebar} className=\"fixed inset-0 bg-black opacity-50 z-40 top-[4.5rem]\"></div>}\n    </>\n  )\n}\n","size_bytes":2468},"src/components/Sidebar.tsx":{"content":"'use client'\n\ninterface SidebarProps {\n  isOpen: boolean;\n}\n\nexport default function Sidebar({ isOpen }: SidebarProps) {\n  return (\n    <div\n      className={`fixed top-[4.5rem] left-0 h-[calc(100vh-4.5rem)] w-64 bg-black text-white transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}>\n      <div className=\"p-4\">_</div>\n    </div>\n  );\n}\n","size_bytes":395},"replit.md":{"content":"# Next.js Course Platform\n\n## Overview\nThis is a Next.js 15 course platform with a modern UI built with React 19, TypeScript, and Tailwind CSS. The app features a course interface with a header, sidebar, and accordion navigation.\n\n## Recent Changes\n**October 7, 2025** - Migrated from Vercel to Replit\n- Updated package.json scripts to bind to port 5000 and host 0.0.0.0 for Replit compatibility\n- Configured workflow to run the Next.js development server\n- Set up deployment configuration for Autoscale deployment\n- Removed turbopack flag for compatibility\n\n## Project Architecture\n- **Framework**: Next.js 15.5.4 with App Router\n- **UI Library**: React 19.1.0\n- **Styling**: Tailwind CSS 4\n- **Language**: TypeScript\n- **Package Manager**: npm\n\n### Project Structure\n```\nâ”œâ”€â”€ src/\nâ”‚   â”œâ”€â”€ app/           # Next.js App Router pages\nâ”‚   â”‚   â”œâ”€â”€ layout.tsx # Root layout\nâ”‚   â”‚   â”œâ”€â”€ page.tsx   # Home page\nâ”‚   â”‚   â””â”€â”€ globals.css\nâ”‚   â””â”€â”€ components/    # React components\nâ”‚       â”œâ”€â”€ Header.tsx\nâ”‚       â”œâ”€â”€ Sidebar.tsx\nâ”‚       â””â”€â”€ ContinueAccordion.tsx\nâ”œâ”€â”€ public/           # Static assets\nâ””â”€â”€ package.json\n```\n\n## Development\n- **Dev Server**: Runs on port 5000 with host 0.0.0.0\n- **Build Command**: `npm run build`\n- **Start Command**: `npm run start`\n\n## Deployment\n- **Target**: Autoscale (serverless)\n- **Build**: `npm run build`\n- **Start**: `npm run start -p 5000 -H 0.0.0.0`\n","size_bytes":1471}},"version":1}